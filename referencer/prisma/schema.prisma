generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clip {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String

  videoId    String
  title      String
  thumbnail  String

  startTime  Float
  endTime    Float

  isPublic   Boolean    @default(false)
  shareSlug  String?    @unique

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  clipTags   ClipTag[]  // relations to per-clip tags

  @@map("clip")
}

model Tag {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String

  name      String

  clipTags  ClipTag[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, name])  // each userâ€™s tag names are unique
  @@map("tag")
}

model ClipTag {
  id        String   @id @default(cuid())
  clip      Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)
  clipId    String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  rating    Int      @default(0)  // likability rating for this clip-tag pairing

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clipId, tagId])  // prevent duplicate tag assignments
  @@map("clip_tag")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions      Session[]
  accounts      Account[]
  clips         Clip[]
  tags          Tag[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
